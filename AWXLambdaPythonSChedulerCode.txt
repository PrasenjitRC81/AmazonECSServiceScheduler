import json
import boto3

def lambda_handler(event, context):
    # TODO implement
    print("Hello World2.9")
    print("Received event: " + json.dumps(event))
    cluster_name = 'ReportFargateSpotCluster2'
    action = 'Start'
    environment = 'dev'
    #servicesArn = list_ecs_services(cluster_name)
    print("Hello World2.6")
    start_fargate_service(action, cluster_name, environment)
    #list_ecs_services()
    #get_fargate_service_tags()
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }


def list_ecs_services():
    print("list_ecs_services start")
    ecs_client2 = boto3.client('ecs')
     
    cluster_name = 'ReportFargateSpotCluster2'
    service_name = 'HelloService'

    try:
        response = ecs_client2.list_services(cluster=cluster_name)
        print("list_ecs_services start 1.2")
        servicesArn = response['serviceArns']
        
        while 'nextToken' in response:
            response = ecs_client.list_services(cluster=cluster_name, nextToken=response['nextToken'])
            print('service name ', get_service_value(response['servicesArn']))
            servicesArn.extend(response['servicesArn'])
        for arn in servicesArn:
             print(get_service_value(arn))
        
    except Exception as e:
        print(f"Error starting service: {e}")

   
    return servicesArn
    
def get_service_value(arn):
    service_name = arn.split('/')[-1]
    return service_name

def get_fargate_service_tags():
    ecs_client = boto3.client('ecs')
    cluster_name = 'ReportFargateSpotCluster2'
    service_name = 'HelloServiceNonValid'
    print('service details function')
    
    try:
        response = ecs_client.describe_services(
            cluster=cluster_name,
            services=[service_name]
        )
        print('tags response',response)

        if response['services']:
            service_details = response['services'][0]
            tags = service_details.get('tags', [])
            return tags
        else:
            print(f"Service {service_name} not found in cluster {cluster_name}.")
            return []
    except Exception as e:
        print(f"Error getting service tags: {e}")
        return []


def start_fargate_service(action, cluster_name, argEnv):
    ecs_client = boto3.client('ecs')
    
    print('argument eventbridge action  ', action)
    print('argument cluster_name ', cluster_name)
    print('argument environment  ',argEnv)
    
    # Replace these placeholders with your actual service and cluster names
    #cluster_name = 'ReportFargateSpotCluster2'
    #service_name = 'HelloService'
    #service_name = 'arn:aws:ecs:us-east-1:820242904343:service/ReportFargateSpotCluster2/HelloWordService''
    desired_task_value = None
    environment = None
    #print("Hello World2.8")

    servicesArn = ''
    try:
        response = ecs_client.list_services(cluster=cluster_name)
        #print("list_ecs_services start 1.2")
        servicesArn = response['serviceArns']
        
        while 'nextToken' in response:
            response = ecs_client.list_services(cluster=cluster_name, nextToken=response['nextToken'])
            print('service name ', get_service_value(response['servicesArn']))
            servicesArn.extend(response['servicesArn'])
        for arn in servicesArn:
            #print("list_ecs_services start 1.3")
            service_name = get_service_value(arn)
            #print(get_service_value(arn))
        
    except Exception as e:
        print(f"Error starting service: {e}")

    try:
        #print('tags response 1')
        #print(servicesArn[0])
        service_name = servicesArn[0]
        response = ecs_client.describe_services(
            cluster=cluster_name,
            services=[service_name]
        )
        #print('tags response2')
        #print("list_ecs_services start 1.4")
        
        if not response['services']:
            raise Exception(f"Service '{service_name}' not found in cluster '{cluster_name}'")
        
        #serviceNameARN = 'arn:aws:ecs:us-east-1:820242904343:service/ReportFargateSpotCluster2/HelloService'
        
        responseTags = ecs_client.list_tags_for_resource(resourceArn=service_name)['tags']
        
        # Accessing the key-value pairs
        
        for item in responseTags:
            key = item['key']
            value = item['value']
            if key == 'desiredTask':
                desired_task_value = item['value']
            if key == 'environment':
                environment = item['value']
            
        print(f"Key: {key}, Value: {value}")

        print('desired_task_value    ',desired_task_value)
        print('environment    ',environment)
        
        print(responseTags)
        
          
    except Exception as e:
        print(f"Error starting service: {e}")
    
    if argEnv == environment:
        print('environment matches')
        try:
            print("Hello World2.7")
            int_desired_task_value = int(desired_task_value)
    
            if action == 'Start':
                response = ecs_client.update_service(
                    cluster=cluster_name,
                    service=service_name,
                    desiredCount= 0  # Set desired count to 1 to start the service
                    #desiredCount= int_desired_task_value  # Set desired count to 1 to start the service
                )
                print(f"Service {service_name} started successfully to count   ",desired_task_value)
                
            if action == 'Stop':
                response = ecs_client.update_service(
                    cluster=cluster_name,
                    service=service_name,
                    desiredCount= 0  # Set desired count to 1 to start the service
                 )
                print(f"Service {service_name} stoped successfully ")
        except Exception as e:
            print(f"Error starting service: {e}")
        
               

    return {'statusCode': 200, 'body': 'Service started successfully'}